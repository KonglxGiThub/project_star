package generator;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.mybatis.generator.api.MyBatisGenerator;
import org.mybatis.generator.config.Configuration;
import org.mybatis.generator.config.xml.ConfigurationParser;
import org.mybatis.generator.exception.XMLParserException;
import org.mybatis.generator.internal.DefaultShellCallback;
import org.springframework.core.io.DefaultResourceLoader;

public class generatorTemp {

    public void generator() throws Exception {

        List<String> warnings = new ArrayList<String>();
        boolean overwrite = true;
        
        
     // 获取文件分隔符
     		String separator = File.separator;
     		
     		// 获取工程路径
     		File projectPath = new DefaultResourceLoader().getResource("").getFile();
     		while(!new File(projectPath.getPath()+separator+"src"+separator+"main").exists()){
     			projectPath = projectPath.getParentFile();
     		}
     		
     		
     		// 模板文件路径  F:\workspace\project_star
     		//String tplPath = StringUtils.replace(projectPath+"/src/main/java/com/thinkgem/jeesite/generate/template", "/", separator);
        //指定 逆向工程配置文件
        File configFile = new File("F:\\workspace\\project_starsrc/main/java/com/generator/generator.xml");
        ConfigurationParser cp = new ConfigurationParser(warnings);
        Configuration config = cp.parseConfiguration(configFile);
        DefaultShellCallback callback = new DefaultShellCallback(overwrite);
        MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config,
                callback, warnings);
        myBatisGenerator.generate(null);

    }

    public static void main(String[] args) throws Exception {
        try {
            generatorTemp generatorSqlmap = new generatorTemp();
            generatorSqlmap.generator();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
}